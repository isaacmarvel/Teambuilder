@page "/About"

<PageTitle>About</PageTitle>

<h1>About</h1>
<br>
<br>
<h3>https://github.com/isaacmarvel/Teambuilder</h3>
<br>
<br>

<p>
    This is a Blazor site used to create and store pokemon teams. It pulls pokemon data from the pokeapi(https://pokeapi.co/) and allows users to create a team of six pokemon based on that data, including moves, abilites, and held items.
    <br> <br>
    Once a team has been constructed, the team is sent to a SQLite database via EF Core, and the team data is pulled and displayed on the front page.
    <br> <br>
    PokeTeamBuilder.Console was just to mess around with api requests, and PokeTeamBuilder.Core contains my Pokemon class, as well as an api client that I didn't really end up using.
    <br> <br>
    Instructions to run: After cloning the repo, open PokeTeamBuilder.sln in Visual Studio. You should be able to just run PokeTeamBuilder.BlazorServer and be good to go!
</p>
<br>
     Code Louisville Features Incorporated:
<br>
<br>
<ol>
    <li>Connect to an external/3rd party API and read data into your app--I read data from the pokeApi</li>
    <li>Read data from an external file, such as text, JSON, CSV, etc and use that data in your application--I'm reading from a SQLite database I create</li>
    <li>Use a LINQ query to retrieve information from a data structure (such as a list or array) or file--Index.razor features .Include()</li>
    <li>Create a dictionary or list, populate it with several values, retrieve at least one value, and use it in your program--got plenty of lists</li>

</ol>
<br>
    I intend to continue work on this page, and hope to eventually add:
<br>
<br>
<ul>

    <li>The ability to choose pokemon's stats.</li>
    <li>A way to search through items and pokemon instead of having to scroll though long lists.</li>
</ul>
<br>
    Eventually, it might also be nice to add:
<br>
<br>
<ul>
    <li>User authentication</li>
    <li>The ability to edit and delete teams one has already made.</li>
    <li>Create unit tests for the app</li>
</ul>

